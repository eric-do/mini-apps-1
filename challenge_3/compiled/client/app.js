const HOMEPAGE_VIEW = 0;
const REGISTRATION_VEW = 1;
const ADDRESS_VIEW = 2;
const CREDIT_VIEW = 3;
const CONFIRMATION_VIEW = 4;

class App extends React.Component {
  constructor(props) {
    super(props);
    this.state = {
      hasPurchased: false,
      currentView: HOMEPAGE_VIEW,
      user: {}
    };
  }

  nextViewHandler(e) {
    if (e) {
      e.preventDefault();
    }
    //e.preventDefault();
    //this.postData();
    var currentView = this.state.currentView;
    currentView++;
    this.setView(currentView);
  }

  postData() {
    $.ajax({
      url: 'http://localhost:3000',
      method: 'POST',
      data: { user: this.state.user },
      success: data => {
        console.log('Success! Received: ' + data);
        var user = Object.assign(this.state.user);
        user['id'] = data;
        this.setState({
          user: user
        });
      },
      error: () => console.log('error')
    });
  }

  nextViewandPost(e) {
    this.nextViewHandler(e);
    this.postData();
  }

  nextViewAndGet(e) {
    e.preventDefault();
    $.ajax({
      url: 'http://localhost:3000/confirmation',
      method: 'POST',
      data: { user: this.state.user },
      success: data => {
        console.log('Success! ' + data);
        this.nextViewHandler();
      },
      error: () => console.log('error')
    });
  }

  handleSubmit(e) {
    e.preventDefault();
  }

  handleChange(e) {
    e.preventDefault();
    var name = e.target.id;
    var value = e.target.value;
    var user = Object.assign(this.state.user);
    user[name] = value;
    this.setState({
      user: user
    });
  }

  resetView(e) {
    e.preventDefault();
    var currentView = 0;
    this.setView(currentView);
  }

  setView(currentView) {
    this.setState({
      currentView: currentView
    });
  }

  render() {
    if (this.state.currentView === HOMEPAGE_VIEW) {
      return React.createElement(Homepage, { onClick: this.nextViewandPost.bind(this) });
    }

    if (this.state.currentView === REGISTRATION_VEW) {
      return React.createElement(Registration, { onClick: this.nextViewandPost.bind(this), onChange: this.handleChange.bind(this) });
    }

    if (this.state.currentView === ADDRESS_VIEW) {
      return React.createElement(Address, { onClick: this.nextViewandPost.bind(this), onChange: this.handleChange.bind(this) });
    }

    if (this.state.currentView === CREDIT_VIEW) {
      return React.createElement(CreditCard, { onClick: this.nextViewAndGet.bind(this), onChange: this.handleChange.bind(this) });
    }

    if (this.state.currentView === CONFIRMATION_VIEW) {
      return React.createElement(Confirmation, { user: this.state.user, onClick: this.resetView.bind(this), onChange: this.handleChange.bind(this) });
    }
  }
}

var Homepage = props => React.createElement(
  'div',
  { id: 'homepage' },
  React.createElement(
    'h1',
    null,
    'Homepage'
  ),
  React.createElement(
    'button',
    { onClick: props.onClick },
    'Checkout'
  )
);

var Registration = props => {
  return React.createElement(
    'div',
    { id: 'registration' },
    React.createElement(
      'h1',
      null,
      'Registration'
    ),
    React.createElement(
      'form',
      { onSubmit: props.handleSubmit },
      React.createElement('input', { id: 'username', type: 'text', placeholder: 'Name', onChange: e => props.onChange(e) }),
      React.createElement('input', { id: 'email', type: 'text', placeholder: 'Email', onChange: e => props.onChange(e) }),
      React.createElement('input', { id: 'password', type: 'text', placeholder: 'Password', onChange: e => props.onChange(e) }),
      React.createElement(
        'button',
        { onClick: e => props.onClick(e) },
        'Next'
      )
    )
  );
};

var Address = props => React.createElement(
  'div',
  { id: 'address' },
  React.createElement(
    'h1',
    null,
    'Address'
  ),
  React.createElement('input', { id: 'address1', type: 'text', placeholder: 'Line 1', onChange: e => props.onChange(e) }),
  React.createElement('input', { id: 'address2', type: 'text', placeholder: 'Line 2', onChange: e => props.onChange(e) }),
  React.createElement('input', { id: 'city', type: 'text', placeholder: 'City', onChange: e => props.onChange(e) }),
  React.createElement('input', { id: 'state', type: 'text', placeholder: 'State', onChange: e => props.onChange(e) }),
  React.createElement('input', { id: 'zip', type: 'text', placeholder: 'Zip Code', onChange: e => props.onChange(e) }),
  React.createElement('input', { id: 'phone', type: 'text', placeholder: 'Phone number, e.g. (555)555-5555', onChange: e => props.onChange(e) }),
  React.createElement(
    'button',
    { onClick: e => props.onClick(e) },
    'Next'
  )
);

var CreditCard = props => React.createElement(
  'div',
  { id: 'address' },
  React.createElement(
    'h1',
    null,
    'Credit Card'
  ),
  React.createElement('input', { id: 'creditcard', type: 'text', placeholder: 'Credit card number', onChange: e => props.onChange(e) }),
  React.createElement('input', { id: 'expiration', type: 'date', placeholder: 'Expiration date', onChange: e => props.onChange(e) }),
  React.createElement('input', { id: 'cvv', type: 'text', placeholder: 'CVV', onChange: e => props.onChange(e) }),
  React.createElement('input', { id: 'billing_zip', type: 'text', placeholder: 'Billing zip code', onChange: e => props.onChange(e) }),
  React.createElement(
    'button',
    { onClick: e => props.onClick(e) },
    'Next'
  )
);

var Confirmation = props => React.createElement(
  'div',
  { id: 'confirmation' },
  React.createElement(
    'h1',
    null,
    'Confirmation'
  ),
  Object.keys(props.user).map(key => React.createElement(
    'div',
    null,
    key,
    ' : ',
    props.user[key]
  )),
  React.createElement(
    'button',
    { onClick: e => props.onClick(e) },
    'Purchase'
  )
);

ReactDOM.render(React.createElement(App, null), document.getElementById(`app`));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,